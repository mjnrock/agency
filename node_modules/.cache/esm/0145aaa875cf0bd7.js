let EventEmitter,uuidv4;_75c‍.x([["default",()=>Node]]);_75c‍.w("events",[["default",["EventEmitter"],function(v){EventEmitter=v}]]);_75c‍.w("uuid",[["v4",["uuidv4"],function(v){uuidv4=v}]]);


/**
 * ? <Node>
 * 
 */
               class Node extends EventEmitter {
    constructor(...evaluators) {
        super();

        this._id = uuidv4();
        this._evaluators = evaluators;        
        this._isConjunctive = false;
        this._isNegation = false;
    }

    negation() {
        this._isNegation = true;

        return this;
    }
    affirmative() {
        this._isNegation = false;

        return this;
    }

    dysjunct() {
        this._isConjunctive = false;

        return this;
    }
    conjunct() {
        this._isConjunctive = true;

        return this;
    }

    run(...args) {
        if(this._isConjunctive === true) {
            let result = true;

            for(let evaluator of this._evaluators) {
                if(typeof evaluator === "function") {
                    result = result && evaluator(...args);
                } else {
                    throw new Error("@evaluator must be a function");
                }
            }

            if(this._isNegation) {
                result = !result;
            }
    
            if(result === true) {
                this.emit("activate");

                return true;
            }

            return false;
        }

        for(let evaluator of this._evaluators) {
            if(typeof evaluator === "function") {
                let result = evaluator(...args);

                if(this._isNegation) {
                    result = !result;
                }

                if(result === true) {
                    this.emit("activate");

                    return true;
                }
            } else {
                throw new Error("@evaluator must be a function");
            }
        }

        return false;
    }

    static $(...evaluators) {
        if(typeof evaluators[ 0 ] === "boolean" && evaluators[ 0 ] === true) {
            return Node.$(...evaluators.slice(1)).negation();
        }

        return new Node(...evaluators);
    }
    static Conjuct(...evaluators) {
        if(typeof evaluators[ 0 ] === "boolean" && evaluators[ 0 ] === true) {
            return Node.$(...evaluators.slice(1)).conjunct().negation();
        }

        return Node.$(...evaluators).conjunct();
    }
    static Dysjunct(...evaluators) {
        if(typeof evaluators[ 0 ] === "boolean" && evaluators[ 0 ] === true) {
            return Node.$(...evaluators.slice(1)).dysjunct().negation();
        }

        return Node.$(...evaluators).dysjunct();
    }
};